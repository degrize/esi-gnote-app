/**
 * AnneeScolaire entity.
 * @author Luis-Borges.
 */
entity AnneeScolaire {
	/**
     * L' ann√©e scolaire
     * @author Eleve.
    */
	periode String required,
    dateDebut LocalDate required,
    dateFin LocalDate,
    
}


entity Planche{
	observation String required
}

// an ignored comment
/** not an ignored comment */
entity Semestre {
	nomSemestre String required
}


entity Note {
	note Double required,
    typeNote TypeNote required
}

entity Bulletin {
	signatureDG String required,
	observation String required
}


entity Professeur {
	
    nomProf String required,
    prenomProf String required,
    contactProf String,
    
}

entity Filiere {
	
    nomFiliere String required,
    
}

// an ignored comment
/** not an ignored comment */
entity Classe {
	nomClasse String required,
	
}

entity Etudiant {
	nomET String required,
    prenomET String required,
    photo Blob,
    numeroParent String,
    numeroTuteur String,
    contactET String,
}

/**
 * Absence.
 * @author Luis-Borges.
 */
entity Absence {
	etat String required,
    heureDebut String,
    heureFin String,
    justificationEcrit String,
    justificationNumerique Blob,
}

/**
 * The Employee entity.
 */
entity Inspecteur{
	/**
	* The firstname attribute.
	*/
	nomInspecteur String required,
    prenomInspecteur String,
    contactInspecteur String,
	
}


entity EC {
	nomEC String required,
    coeff Integer required,
	
}

entity UE {
	nomUE String,
	
}


entity Encadreur {
	nomEnc String required,
    prenomsEnc String,
    emailEnc String
}



// an ignored comment
/** not an ignored comment */
entity Horaire {
    dateSout LocalDate required,
    dateEffet LocalDate
}

entity Soutenance {
	typeSout TypeSoutenance required,
    themeSout String required,
    noteSout Double required,
}


/**
 * Salle entity.
 * @author The Luis-Borges.
 */
entity Salle {
	numeroSalle String required,
	nbrePlace Integer,
    etat String
}

/**
 * The Jury entity.
 */
entity Jury {
	/**
	* The firstname attribute.
	*/
	presidentJury String required,
}

entity Cycle {
	nomCycle String required,
}

entity DemandeInspecteurEtudiant {
	message String required
}

entity DemandeInspecteurDE {
	message String required
}

entity RecupererBulletin {
	signatureEleve String required,
    bulletinScanne Blob required
}

entity ListedeClasse {
	codedeClasse String,
    nomClasse String, 
}	



enum TypeSoutenance {
	PFE,
    UP_PRO,
    STAGE_APPLICATION,
    STAGE_IMERTION,
    BE,
    AUTRE
}

enum TypeNote {
    DEVOIR_SUR_TABLE,
    INTERROGATION,
    PROJET,
    DEVOIR_DE_MAISON,
    PARTICIPATION
}


relationship ManyToOne {
	Absence{professeur(nomProf)} to Professeur,
    Absence {inspecteur(nomInspecteur)} to Inspecteur,
    Absence{eC(nomEC)} to EC,
    Absence{etudiant(NomET)} to Etudiant
    
}


// defining multiple OneToMany relationships with comments
relationship ManyToMany {
	Inspecteur{professeur(nomEC)} to Professeur{inspecteur},
    Inspecteur{etudiant(nomET)} to Etudiant{inspecteur},
    Filiere{eE(nomEC)} to UE{filiere},
    Professeur{etudiant(nomET)} to Etudiant{professeur},
    Professeur{classe(NomClasse)} to Classe{professeur},
    Professeur{eC(NomEC)} to EC{professeur},
    
	
}

relationship ManyToOne {
    Filiere{Etudiant} to Cycle,
    Classe{filiere(nomFiliere)} to Filiere{classe}
}

relationship OneToMany {
	Encadreur{etudiant(NomET)} to Etudiant{encadreur},
    UE{eC(nomEC)} to EC{ue}
}


relationship ManyToMany{
	Soutenance{etudiant(NomET)} to Etudiant{soutenance},
    Bulletin{professeur(nomProf)} to Professeur{bulletin} // LE DIRECTEUR ECOLE ET le DE SIGNE PLUSIEURS BULLETINs
}



relationship ManyToOne {
	Soutenance{soutenance(themeSout)} to Salle,
    Bulletin{etudiant(nomET)} to Etudiant,
}

relationship ManyToOne {
	Soutenance{horaire(dateSout)} to Horaire
}

relationship ManyToMany {
	Salle{horaire(dateSout)} to Horaire{salle}
}

relationship ManyToMany {
	Jury{professeur(nomProf)} to Professeur{jury}
}
relationship OneToMany {
	Soutenance{jury(presidentJury)} to Jury{soutenance} 
}


relationship ManyToOne {
	Semestre{anneeScolaire(periode)} to AnneeScolaire, 
    Bulletin{semestre} to Semestre,
    RecupererBulletin{etudiant(matriculeET)} to Etudiant,
    RecupererBulletin{bulletin(observation)} to Bulletin,
    Planche{semestre(nomSemestre)} to Semestre
    
}


relationship ManyToMany {
	Note{etudiant(matriculeET)} to Etudiant{note},
    Note{eC(nomEC)} to EC{note},
    Etudiant{classe(nomClasse)} to Classe{etudiant},
   
}

relationship ManyToMany {
    DemandeInspecteurEtudiant{etudiant(matriculeET)} to Etudiant{demandeInspecteurEtudiant},
    DemandeInspecteurEtudiant{inspecteur(nomInspecteur)} to Inspecteur{demandeInspecteurEtudiant}
    
}

relationship ManyToMany {
    DemandeInspecteurDE{professeur(nomProf)} to Professeur{demandeInspecteurDE},
    DemandeInspecteurDE{inspecteur(nomInspecteur)} to Inspecteur{demandeInspecteurDE}
    
}


relationship ManyToMany {
	Classe{eC(nomEC)} to EC{classe}
}

relationship OneToMany {
	Professeur{communiquerBulletin} to Professeur{professeur} // le DG envoi bulletin au DE
}

relationship ManyToMany {
	Professeur{listeDeClasse(codeListeDeClasse)} to ListedeClasse{professeur}
}


// Set pagination options
paginate all with pagination

// Use Data Transfer Objects (DTO)
dto * with mapstruct

// Set service options to all except few
service all with serviceImpl

// Set an angular suffix
// angularSuffix * with mySuffix
